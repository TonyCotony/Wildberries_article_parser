from aiogram import Dispatcher, Bot
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from core.others.aiohttp_parser import get_info
from core.keyboards.keyboards import accept_kb


class ArticleSearch(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    """
    await_product_group = State()
    await_product_article = State()
    await_parsing = State()


async def start_command(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —Å—Ç–µ–π—Ç—É
    """
    await state.set_state(ArticleSearch.await_product_group)
    msg = await message.answer(
        '–î–∞–Ω–∏–ª –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á, –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üëã'
        '\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –≥–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å')
    await state.update_data(
        msg_id=msg.message_id,
        chat_id=msg.chat.id
    )


async def get_product_group(message: Message, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤–µ—Ä–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    await state.update_data(group=message.text.lower())
    await message.delete()
    all_data = await state.get_data()
    await bot.edit_message_text(
        chat_id=all_data['chat_id'],
        message_id=all_data['msg_id'],
        text=f'üîé <b>{message.text}</b> - —ç—Ç—É –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤ –∏—â–µ–º?'
             '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ',
        reply_markup=accept_kb,
        parse_mode='HTML'
    )


async def get_accept_product_group(call: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã,
    –µ—Å–ª–∏ –≤–µ—Ä–Ω–æ, —Ç–æ –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å—Ç—ç–π—Ç—É
    """
    if call.data == 'yes':
        all_data = await state.get_data()
        await state.set_state(ArticleSearch.await_product_article)
        await call.message.edit_text(
            text=f'üîé –ò—â–µ–º <b>{all_data["group"]}</b>'
                 f'\n\nüóÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞',
            reply_markup=None,
            parse_mode='HTML'
        )
    else:
        await call.message.edit_text(
            text=f'üîé –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤, –≥–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å.'
                 f'\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>—Ç–µ–∫—Å—Ç–æ–º</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤',
            reply_markup=None,
            parse_mode='HTML'
        )


async def get_product_article(message: Message, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω–æ –ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    """
    all_data = await state.get_data()
    await message.delete()
    try:
        await state.update_data(article=int(message.text))

        await bot.edit_message_text(
            chat_id=all_data['chat_id'],
            message_id=all_data['msg_id'],
            text=f'üîé –í –≥—Ä—É–ø–ø–µ <b>{all_data["group"]}</b>'
                 f'\n–ò—â–µ–º <b>{message.text}</b> - –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª?'
                 '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ',
            reply_markup=accept_kb,
            parse_mode='HTML'
        )
    except ValueError:

        await bot.edit_message_text(
            chat_id=all_data['chat_id'],
            message_id=all_data['msg_id'],
            text=f'‚ùå‚ùå‚ùå {message.text} - —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª —á–∏—Å–ª–æ'
                 f'\n\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ <b>—á–∏—Å–ª–æ</b>',
            reply_markup=None,
            parse_mode='HTML'
        )


async def get_accept_product_article(call: CallbackQuery, state: FSMContext):
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ, —á—Ç–æ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å—Ç–µ–π—Ç—É,
    –µ—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –≤–µ—Ä–µ–Ω, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ aiohttp.
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    all_data = await state.get_data()
    if call.data == 'yes':
        await state.set_state(ArticleSearch.await_parsing)
        article = all_data['article']
        await call.message.edit_text(
            '‚ÄºÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥'
            '\n\n–ü–∞—Ä—Å–∏–Ω–≥ —Å–¥–µ–ª–∞–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–∞–∑—É 50 –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü'
            '\n\n–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏—â–µ—Ç–µ –≤–µ—Ä–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª:'
            f'\nüóÑ –ì—Ä—É–ø–ø–∞ –ø–æ–∏—Å–∫–∞: <b>{all_data["group"]}</b>'
            f'\nüÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{all_data["article"]}</b>'
            f'\n<b><a href="https://www.wildberries.ru/catalog/{article}/detail.aspx">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a></b>',
            parse_mode='HTML'
        )

        info = await get_info(
            products_group=all_data['group'],
            article=all_data['article']
        )

        if not info:
            await call.message.answer(f'–í –ø–µ—Ä–≤—ã—Ö 5000 –ø–æ–∑–∏—Ü–∏–π –¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                                      f'\n–Ø –Ω–µ –¥–µ–ª–∞–ª –∞–≤—Ç–æ –ø–æ–≤—Ç–æ—Ä, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–Ω–æ–≤–∞')

        else:
            await call.message.answer(
                f'üóÑ –ì—Ä—É–ø–ø–∞ –ø–æ–∏—Å–∫–∞: <b>{all_data["group"]}</b>'
                f'\nüÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{all_data["article"]}</b>'
                f'\n<b><a href="https://www.wildberries.ru/catalog/{all_data["article"]}/detail.aspx">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a></b>'
                f'\n\n‚ÄºÔ∏è –ù–ê–ô–î–ï–ù –ù–ê –°–¢–†–ê–ù–ò–¶–ï(–ø–æ 100 –æ–±—ä–µ–∫—Ç–æ–≤) - <b>{info["page"]}</b>'
                f'\n–ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - <b>{info["position on the page"]}</b>',
                parse_mode='HTML'
            )
    else:
        await call.message.edit_text(
            text=f'üîé –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–∞ wildberries, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å.'
                 f'\nüîé –í –≥—Ä—É–ø–ø–µ <b>{all_data["group"]}</b>'
                 f'\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <b>—á–∏—Å–ª–æ–º</b> –∞—Ä—Ç–∏–∫—É–ª',
            reply_markup=None,
            parse_mode='HTML'
        )


def handlers_for_search(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ –±–æ—Ç–∞
    """
    dp.message.register(start_command, commands=['start', '—Å—Ç–∞—Ä—Ç'])
    dp.message.register(get_product_group, state=ArticleSearch.await_product_group)
    dp.callback_query.register(get_accept_product_group, state=ArticleSearch.await_product_group)
    dp.message.register(get_product_article, state=ArticleSearch.await_product_article),
    dp.callback_query.register(get_accept_product_article, state=ArticleSearch.await_product_article)
